// Code generated by protoc-gen-go. DO NOT EDIT.
// source: release.proto

package release_raspi_com

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetReleasesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReleasesRequest) Reset()         { *m = GetReleasesRequest{} }
func (m *GetReleasesRequest) String() string { return proto.CompactTextString(m) }
func (*GetReleasesRequest) ProtoMessage()    {}
func (*GetReleasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e241864f384c76b6, []int{0}
}

func (m *GetReleasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReleasesRequest.Unmarshal(m, b)
}
func (m *GetReleasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReleasesRequest.Marshal(b, m, deterministic)
}
func (m *GetReleasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReleasesRequest.Merge(m, src)
}
func (m *GetReleasesRequest) XXX_Size() int {
	return xxx_messageInfo_GetReleasesRequest.Size(m)
}
func (m *GetReleasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReleasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReleasesRequest proto.InternalMessageInfo

type WatchReleasesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchReleasesRequest) Reset()         { *m = WatchReleasesRequest{} }
func (m *WatchReleasesRequest) String() string { return proto.CompactTextString(m) }
func (*WatchReleasesRequest) ProtoMessage()    {}
func (*WatchReleasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e241864f384c76b6, []int{1}
}

func (m *WatchReleasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchReleasesRequest.Unmarshal(m, b)
}
func (m *WatchReleasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchReleasesRequest.Marshal(b, m, deterministic)
}
func (m *WatchReleasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchReleasesRequest.Merge(m, src)
}
func (m *WatchReleasesRequest) XXX_Size() int {
	return xxx_messageInfo_WatchReleasesRequest.Size(m)
}
func (m *WatchReleasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchReleasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchReleasesRequest proto.InternalMessageInfo

type ReleasesResponse struct {
	Count                int32      `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Releases             []*Release `protobuf:"bytes,16,rep,name=releases,proto3" json:"releases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReleasesResponse) Reset()         { *m = ReleasesResponse{} }
func (m *ReleasesResponse) String() string { return proto.CompactTextString(m) }
func (*ReleasesResponse) ProtoMessage()    {}
func (*ReleasesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e241864f384c76b6, []int{2}
}

func (m *ReleasesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleasesResponse.Unmarshal(m, b)
}
func (m *ReleasesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleasesResponse.Marshal(b, m, deterministic)
}
func (m *ReleasesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleasesResponse.Merge(m, src)
}
func (m *ReleasesResponse) XXX_Size() int {
	return xxx_messageInfo_ReleasesResponse.Size(m)
}
func (m *ReleasesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleasesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleasesResponse proto.InternalMessageInfo

func (m *ReleasesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ReleasesResponse) GetReleases() []*Release {
	if m != nil {
		return m.Releases
	}
	return nil
}

// Release contains all the metadata that pertains to a specific raspi release.
type Release struct {
	Identifier           string           `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Description          string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PublishedAt          string           `protobuf:"bytes,3,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	Assets               []*Release_Asset `protobuf:"bytes,16,rep,name=assets,proto3" json:"assets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Release) Reset()         { *m = Release{} }
func (m *Release) String() string { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()    {}
func (*Release) Descriptor() ([]byte, []int) {
	return fileDescriptor_e241864f384c76b6, []int{3}
}

func (m *Release) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release.Unmarshal(m, b)
}
func (m *Release) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release.Marshal(b, m, deterministic)
}
func (m *Release) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release.Merge(m, src)
}
func (m *Release) XXX_Size() int {
	return xxx_messageInfo_Release.Size(m)
}
func (m *Release) XXX_DiscardUnknown() {
	xxx_messageInfo_Release.DiscardUnknown(m)
}

var xxx_messageInfo_Release proto.InternalMessageInfo

func (m *Release) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Release) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Release) GetPublishedAt() string {
	if m != nil {
		return m.PublishedAt
	}
	return ""
}

func (m *Release) GetAssets() []*Release_Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

type Release_Asset struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Release_Asset) Reset()         { *m = Release_Asset{} }
func (m *Release_Asset) String() string { return proto.CompactTextString(m) }
func (*Release_Asset) ProtoMessage()    {}
func (*Release_Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_e241864f384c76b6, []int{3, 0}
}

func (m *Release_Asset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release_Asset.Unmarshal(m, b)
}
func (m *Release_Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release_Asset.Marshal(b, m, deterministic)
}
func (m *Release_Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release_Asset.Merge(m, src)
}
func (m *Release_Asset) XXX_Size() int {
	return xxx_messageInfo_Release_Asset.Size(m)
}
func (m *Release_Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Release_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Release_Asset proto.InternalMessageInfo

func (m *Release_Asset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Release_Asset) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*GetReleasesRequest)(nil), "release.raspi.com.GetReleasesRequest")
	proto.RegisterType((*WatchReleasesRequest)(nil), "release.raspi.com.WatchReleasesRequest")
	proto.RegisterType((*ReleasesResponse)(nil), "release.raspi.com.ReleasesResponse")
	proto.RegisterType((*Release)(nil), "release.raspi.com.Release")
	proto.RegisterType((*Release_Asset)(nil), "release.raspi.com.Release.Asset")
}

func init() {
	proto.RegisterFile("release.proto", fileDescriptor_e241864f384c76b6)
}

var fileDescriptor_e241864f384c76b6 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x4f, 0x83, 0x40,
	0x10, 0x85, 0xc5, 0xda, 0x5a, 0x07, 0x9b, 0xe0, 0x84, 0x18, 0xc2, 0xc1, 0x20, 0xc6, 0xd8, 0x8b,
	0xc4, 0xd4, 0xc4, 0x78, 0xed, 0xc9, 0xfb, 0x5e, 0x3c, 0x78, 0xd0, 0x2d, 0x8c, 0xe9, 0x26, 0x94,
	0xc5, 0xdd, 0xe5, 0x4f, 0xfa, 0x07, 0xfc, 0x3b, 0xa6, 0xb0, 0x20, 0x5a, 0x9a, 0x78, 0xdb, 0xf9,
	0xf2, 0x98, 0xf7, 0x32, 0x0f, 0x98, 0x29, 0xca, 0x89, 0x6b, 0x4a, 0x4a, 0x25, 0x8d, 0xc4, 0xb3,
	0x76, 0x54, 0x5c, 0x97, 0x22, 0x49, 0xe5, 0x26, 0xf6, 0x01, 0x9f, 0xc8, 0xb0, 0x86, 0x6b, 0x46,
	0x1f, 0x15, 0x69, 0x13, 0x9f, 0x83, 0xff, 0xcc, 0x4d, 0xba, 0xfe, 0xcb, 0xdf, 0xc0, 0xfb, 0x41,
	0xba, 0x94, 0x85, 0x26, 0xf4, 0x61, 0x9c, 0xca, 0xaa, 0x30, 0x81, 0x13, 0x39, 0xf3, 0x31, 0x6b,
	0x06, 0x7c, 0x80, 0xa9, 0x35, 0xd3, 0x81, 0x17, 0x8d, 0xe6, 0xee, 0x22, 0x4c, 0x76, 0xdc, 0x13,
	0xbb, 0x8c, 0x75, 0xda, 0xf8, 0xcb, 0x81, 0x63, 0x4b, 0xf1, 0x02, 0x40, 0x64, 0x54, 0x18, 0xf1,
	0x2e, 0x48, 0xd5, 0xeb, 0x4f, 0x58, 0x8f, 0x60, 0x04, 0x6e, 0x46, 0x3a, 0x55, 0xa2, 0x34, 0x42,
	0x16, 0xc1, 0x61, 0x2d, 0xe8, 0x23, 0xbc, 0x84, 0xd3, 0xb2, 0x5a, 0xe5, 0x42, 0xaf, 0x29, 0x7b,
	0xe5, 0x26, 0x18, 0x35, 0x92, 0x8e, 0x2d, 0x0d, 0x3e, 0xc2, 0x84, 0x6b, 0x4d, 0xa6, 0x8d, 0x19,
	0xed, 0x8f, 0x99, 0x2c, 0xb7, 0x42, 0x66, 0xf5, 0xe1, 0x2d, 0x8c, 0x6b, 0x80, 0x08, 0x47, 0x05,
	0xdf, 0x90, 0x4d, 0x58, 0xbf, 0xd1, 0x83, 0x51, 0xa5, 0x72, 0x9b, 0x69, 0xfb, 0x5c, 0x7c, 0x3a,
	0x30, 0x6d, 0x8f, 0x87, 0x2f, 0xe0, 0xf6, 0xce, 0x8e, 0xd7, 0x03, 0xa6, 0xbb, 0xb5, 0x84, 0x57,
	0xfb, 0xb3, 0x75, 0x7d, 0xc4, 0x07, 0xc8, 0x61, 0xf6, 0xab, 0x3d, 0xbc, 0x19, 0xf8, 0x6e, 0xa8,
	0xdf, 0x7f, 0x1a, 0xdc, 0x39, 0xab, 0x49, 0xfd, 0x43, 0xdd, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x83, 0xe8, 0xc2, 0x06, 0x61, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReleasesClient is the client API for Releases service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReleasesClient interface {
	//
	GetReleases(ctx context.Context, in *GetReleasesRequest, opts ...grpc.CallOption) (*ReleasesResponse, error)
	//
	WatchReleases(ctx context.Context, in *WatchReleasesRequest, opts ...grpc.CallOption) (Releases_WatchReleasesClient, error)
}

type releasesClient struct {
	cc grpc.ClientConnInterface
}

func NewReleasesClient(cc grpc.ClientConnInterface) ReleasesClient {
	return &releasesClient{cc}
}

func (c *releasesClient) GetReleases(ctx context.Context, in *GetReleasesRequest, opts ...grpc.CallOption) (*ReleasesResponse, error) {
	out := new(ReleasesResponse)
	err := c.cc.Invoke(ctx, "/release.raspi.com.Releases/GetReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releasesClient) WatchReleases(ctx context.Context, in *WatchReleasesRequest, opts ...grpc.CallOption) (Releases_WatchReleasesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Releases_serviceDesc.Streams[0], "/release.raspi.com.Releases/WatchReleases", opts...)
	if err != nil {
		return nil, err
	}
	x := &releasesWatchReleasesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Releases_WatchReleasesClient interface {
	Recv() (*ReleasesResponse, error)
	grpc.ClientStream
}

type releasesWatchReleasesClient struct {
	grpc.ClientStream
}

func (x *releasesWatchReleasesClient) Recv() (*ReleasesResponse, error) {
	m := new(ReleasesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReleasesServer is the server API for Releases service.
type ReleasesServer interface {
	//
	GetReleases(context.Context, *GetReleasesRequest) (*ReleasesResponse, error)
	//
	WatchReleases(*WatchReleasesRequest, Releases_WatchReleasesServer) error
}

// UnimplementedReleasesServer can be embedded to have forward compatible implementations.
type UnimplementedReleasesServer struct {
}

func (*UnimplementedReleasesServer) GetReleases(ctx context.Context, req *GetReleasesRequest) (*ReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReleases not implemented")
}
func (*UnimplementedReleasesServer) WatchReleases(req *WatchReleasesRequest, srv Releases_WatchReleasesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchReleases not implemented")
}

func RegisterReleasesServer(s *grpc.Server, srv ReleasesServer) {
	s.RegisterService(&_Releases_serviceDesc, srv)
}

func _Releases_GetReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleasesServer).GetReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/release.raspi.com.Releases/GetReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleasesServer).GetReleases(ctx, req.(*GetReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Releases_WatchReleases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchReleasesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReleasesServer).WatchReleases(m, &releasesWatchReleasesServer{stream})
}

type Releases_WatchReleasesServer interface {
	Send(*ReleasesResponse) error
	grpc.ServerStream
}

type releasesWatchReleasesServer struct {
	grpc.ServerStream
}

func (x *releasesWatchReleasesServer) Send(m *ReleasesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Releases_serviceDesc = grpc.ServiceDesc{
	ServiceName: "release.raspi.com.Releases",
	HandlerType: (*ReleasesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReleases",
			Handler:    _Releases_GetReleases_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchReleases",
			Handler:       _Releases_WatchReleases_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "release.proto",
}
